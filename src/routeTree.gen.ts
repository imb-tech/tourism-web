/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as MainImport } from './routes/_main'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainCostImport } from './routes/_main/cost'
import { Route as MainChangesImport } from './routes/_main/changes'
import { Route as MainBankImport } from './routes/_main/bank'
import { Route as MainAdminImport } from './routes/_main/admin'
import { Route as MainSettingsIndexImport } from './routes/_main/settings/index'
import { Route as MainPacksIndexImport } from './routes/_main/packs/index'
import { Route as MainPacksPackIndexImport } from './routes/_main/packs/$pack/index'
import { Route as MainPacksPackIdImport } from './routes/_main/packs/$pack/$id'
import { Route as MainPacksPackTourIdImport } from './routes/_main/packs/$pack/tour/$id'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainCostRoute = MainCostImport.update({
  id: '/cost',
  path: '/cost',
  getParentRoute: () => MainRoute,
} as any)

const MainChangesRoute = MainChangesImport.update({
  id: '/changes',
  path: '/changes',
  getParentRoute: () => MainRoute,
} as any)

const MainBankRoute = MainBankImport.update({
  id: '/bank',
  path: '/bank',
  getParentRoute: () => MainRoute,
} as any)

const MainAdminRoute = MainAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => MainRoute,
} as any)

const MainSettingsIndexRoute = MainSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => MainRoute,
} as any)

const MainPacksIndexRoute = MainPacksIndexImport.update({
  id: '/packs/',
  path: '/packs/',
  getParentRoute: () => MainRoute,
} as any)

const MainPacksPackIndexRoute = MainPacksPackIndexImport.update({
  id: '/packs/$pack/',
  path: '/packs/$pack/',
  getParentRoute: () => MainRoute,
} as any)

const MainPacksPackIdRoute = MainPacksPackIdImport.update({
  id: '/packs/$pack/$id',
  path: '/packs/$pack/$id',
  getParentRoute: () => MainRoute,
} as any)

const MainPacksPackTourIdRoute = MainPacksPackTourIdImport.update({
  id: '/packs/$pack/tour/$id',
  path: '/packs/$pack/tour/$id',
  getParentRoute: () => MainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_main/admin': {
      id: '/_main/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof MainAdminImport
      parentRoute: typeof MainImport
    }
    '/_main/bank': {
      id: '/_main/bank'
      path: '/bank'
      fullPath: '/bank'
      preLoaderRoute: typeof MainBankImport
      parentRoute: typeof MainImport
    }
    '/_main/changes': {
      id: '/_main/changes'
      path: '/changes'
      fullPath: '/changes'
      preLoaderRoute: typeof MainChangesImport
      parentRoute: typeof MainImport
    }
    '/_main/cost': {
      id: '/_main/cost'
      path: '/cost'
      fullPath: '/cost'
      preLoaderRoute: typeof MainCostImport
      parentRoute: typeof MainImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/packs/': {
      id: '/_main/packs/'
      path: '/packs'
      fullPath: '/packs'
      preLoaderRoute: typeof MainPacksIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/settings/': {
      id: '/_main/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof MainSettingsIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/packs/$pack/$id': {
      id: '/_main/packs/$pack/$id'
      path: '/packs/$pack/$id'
      fullPath: '/packs/$pack/$id'
      preLoaderRoute: typeof MainPacksPackIdImport
      parentRoute: typeof MainImport
    }
    '/_main/packs/$pack/': {
      id: '/_main/packs/$pack/'
      path: '/packs/$pack'
      fullPath: '/packs/$pack'
      preLoaderRoute: typeof MainPacksPackIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/packs/$pack/tour/$id': {
      id: '/_main/packs/$pack/tour/$id'
      path: '/packs/$pack/tour/$id'
      fullPath: '/packs/$pack/tour/$id'
      preLoaderRoute: typeof MainPacksPackTourIdImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface MainRouteChildren {
  MainAdminRoute: typeof MainAdminRoute
  MainBankRoute: typeof MainBankRoute
  MainChangesRoute: typeof MainChangesRoute
  MainCostRoute: typeof MainCostRoute
  MainIndexRoute: typeof MainIndexRoute
  MainPacksIndexRoute: typeof MainPacksIndexRoute
  MainSettingsIndexRoute: typeof MainSettingsIndexRoute
  MainPacksPackIdRoute: typeof MainPacksPackIdRoute
  MainPacksPackIndexRoute: typeof MainPacksPackIndexRoute
  MainPacksPackTourIdRoute: typeof MainPacksPackTourIdRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainAdminRoute: MainAdminRoute,
  MainBankRoute: MainBankRoute,
  MainChangesRoute: MainChangesRoute,
  MainCostRoute: MainCostRoute,
  MainIndexRoute: MainIndexRoute,
  MainPacksIndexRoute: MainPacksIndexRoute,
  MainSettingsIndexRoute: MainSettingsIndexRoute,
  MainPacksPackIdRoute: MainPacksPackIdRoute,
  MainPacksPackIndexRoute: MainPacksPackIndexRoute,
  MainPacksPackTourIdRoute: MainPacksPackTourIdRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof MainAdminRoute
  '/bank': typeof MainBankRoute
  '/changes': typeof MainChangesRoute
  '/cost': typeof MainCostRoute
  '/': typeof MainIndexRoute
  '/packs': typeof MainPacksIndexRoute
  '/settings': typeof MainSettingsIndexRoute
  '/packs/$pack/$id': typeof MainPacksPackIdRoute
  '/packs/$pack': typeof MainPacksPackIndexRoute
  '/packs/$pack/tour/$id': typeof MainPacksPackTourIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof MainAdminRoute
  '/bank': typeof MainBankRoute
  '/changes': typeof MainChangesRoute
  '/cost': typeof MainCostRoute
  '/': typeof MainIndexRoute
  '/packs': typeof MainPacksIndexRoute
  '/settings': typeof MainSettingsIndexRoute
  '/packs/$pack/$id': typeof MainPacksPackIdRoute
  '/packs/$pack': typeof MainPacksPackIndexRoute
  '/packs/$pack/tour/$id': typeof MainPacksPackTourIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteWithChildren
  '/login': typeof LoginRoute
  '/_main/admin': typeof MainAdminRoute
  '/_main/bank': typeof MainBankRoute
  '/_main/changes': typeof MainChangesRoute
  '/_main/cost': typeof MainCostRoute
  '/_main/': typeof MainIndexRoute
  '/_main/packs/': typeof MainPacksIndexRoute
  '/_main/settings/': typeof MainSettingsIndexRoute
  '/_main/packs/$pack/$id': typeof MainPacksPackIdRoute
  '/_main/packs/$pack/': typeof MainPacksPackIndexRoute
  '/_main/packs/$pack/tour/$id': typeof MainPacksPackTourIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/admin'
    | '/bank'
    | '/changes'
    | '/cost'
    | '/'
    | '/packs'
    | '/settings'
    | '/packs/$pack/$id'
    | '/packs/$pack'
    | '/packs/$pack/tour/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/admin'
    | '/bank'
    | '/changes'
    | '/cost'
    | '/'
    | '/packs'
    | '/settings'
    | '/packs/$pack/$id'
    | '/packs/$pack'
    | '/packs/$pack/tour/$id'
  id:
    | '__root__'
    | '/_main'
    | '/login'
    | '/_main/admin'
    | '/_main/bank'
    | '/_main/changes'
    | '/_main/cost'
    | '/_main/'
    | '/_main/packs/'
    | '/_main/settings/'
    | '/_main/packs/$pack/$id'
    | '/_main/packs/$pack/'
    | '/_main/packs/$pack/tour/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main",
        "/login"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/admin",
        "/_main/bank",
        "/_main/changes",
        "/_main/cost",
        "/_main/",
        "/_main/packs/",
        "/_main/settings/",
        "/_main/packs/$pack/$id",
        "/_main/packs/$pack/",
        "/_main/packs/$pack/tour/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_main/admin": {
      "filePath": "_main/admin.tsx",
      "parent": "/_main"
    },
    "/_main/bank": {
      "filePath": "_main/bank.tsx",
      "parent": "/_main"
    },
    "/_main/changes": {
      "filePath": "_main/changes.tsx",
      "parent": "/_main"
    },
    "/_main/cost": {
      "filePath": "_main/cost.tsx",
      "parent": "/_main"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/_main/packs/": {
      "filePath": "_main/packs/index.tsx",
      "parent": "/_main"
    },
    "/_main/settings/": {
      "filePath": "_main/settings/index.tsx",
      "parent": "/_main"
    },
    "/_main/packs/$pack/$id": {
      "filePath": "_main/packs/$pack/$id.tsx",
      "parent": "/_main"
    },
    "/_main/packs/$pack/": {
      "filePath": "_main/packs/$pack/index.tsx",
      "parent": "/_main"
    },
    "/_main/packs/$pack/tour/$id": {
      "filePath": "_main/packs/$pack/tour/$id.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
